<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HalFloat</name>
    </assembly>
    <members>
        <member name="T:emotitron.Compression.Half">
            <summary>
            A half precision (16 bit) floating point value.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.PrecisionDigits">
            <summary>
            Number of decimal digits of precision.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MantissaBits">
            <summary>
            Number of bits in the mantissa.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MaximumDecimalExponent">
            <summary>
            Maximum decimal exponent.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MaximumBinaryExponent">
            <summary>
            Maximum binary exponent.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MinimumDecimalExponent">
            <summary>
            Minimum decimal exponent.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MinimumBinaryExponent">
            <summary>
            Minimum binary exponent.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.ExponentRadix">
            <summary>
            Exponent radix.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.AdditionRounding">
            <summary>
            Additional rounding.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.Epsilon">
            <summary>
            Smallest value such that 1.0 + epsilon != 1.0
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MaxValue">
            <summary>
            Maximum value of the number.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.MinValue">
            <summary>
            Minimum value of the number.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.NaN">
            <summary>
            Represents not a number (NaN).
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.NegativeInfinity">
            <summary>
            Represents negative infinity.
            </summary>
        </member>
        <member name="F:emotitron.Compression.Half.PositiveInfinity">
            <summary>
            Represents positive infinity.
            </summary>
        </member>
        <member name="M:emotitron.Compression.Half.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SlimMath.Half"/> structure.
            </summary>
            <param name="value">The floating point value that should be stored in 16 bit format.</param>
        </member>
        <member name="P:emotitron.Compression.Half.RawValue">
            <summary>
            Gets the raw 16 bit value used to back this half-float.
            </summary>
        </member>
        <member name="M:emotitron.Compression.Half.ConvertToFloat(emotitron.Compression.Half[])">
            <summary>
            Converts an array of half precision values into full precision values.
            </summary>
            <param name="values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.ConvertToHalf(System.Single[])">
            <summary>
            Converts an array of full precision values into half precision values.
            </summary>
            <param name="values">The values to be converted.</param>
            <returns>An array of converted values.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.IsInfinity(emotitron.Compression.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <returns><c>true</c> if <paramref name="half"/> evaluates to positive or negative infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.IsNaN(emotitron.Compression.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to NaN.
            </summary>
            <returns><c>true</c> if <paramref name="half"/> evaluates to NaN; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.IsNegativeInfinity(emotitron.Compression.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <returns><c>true</c> if <paramref name="half"/> evaluates to negative infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.IsPositiveInfinity(emotitron.Compression.Half)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <returns><c>true</c> if <paramref name="half"/> evaluates to positive infinity; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_LessThan(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Returns a value that indicates whether a specified value is
            less than another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_GreaterThan(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Returns a value that indicates whether a specified value is
            greater than another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_LessThanOrEqual(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Returns a value that indicates whether a specified value is
            less than or equal to another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_GreaterThanOrEqual(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Returns a value that indicates whether a specified value is
            greater than or equal to another specified value.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than or equal to right; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_Equality(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_Inequality(emotitron.Compression.Half,emotitron.Compression.Half)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_Explicit(System.Single)~emotitron.Compression.Half">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:SlimMath.Half"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.op_Implicit(emotitron.Compression.Half)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:SlimMath.Half"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value to be converted.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.ToString">
            <summary>
            Converts the value of the object to its equivalent string representation.
            </summary>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:emotitron.Compression.Half.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:emotitron.Compression.Half.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:emotitron.Compression.Half.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.CompareTo(emotitron.Compression.Half)">
            <summary>
            Compares this instance to another instance of the same type.
            </summary>
            <param name="value">The other value to compare to this instance.</param>
            <returns>A value that specifies if this instance is greater than, less than, or equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.CompareTo(System.Object)">
            <summary>
            Compares this instance to another instance of another type.
            </summary>
            <param name="value">The other value to compare to this instance.</param>
            <returns>A value that specifies if this instance is greater than, less than, or equal to <paramref name="value"/>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.Equals(emotitron.Compression.Half@,emotitron.Compression.Half@)">
            <summary>
            Determines whether the specified object instances are considered equal.
            </summary>
            <param name="value1"/>
            <param name="value2"/>
            <returns>
            <c>true</c> if <paramref name="value1"/> is the same instance as <paramref name="value2"/> or 
            if both are <c>null</c> references or if <c>value1.Equals(value2)</c> returns <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.Equals(emotitron.Compression.Half)">
            <summary>
            Returns a value that indicates whether the current instance is equal to the specified object.
            </summary>
            <param name="other">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.Equals(System.Object)">
            <summary>
            Returns a value that indicates whether the current instance is equal to a specified object.
            </summary>
            <param name="obj">Object to make the comparison with.</param>
            <returns>
            <c>true</c> if the current instance is equal to the specified object; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:emotitron.Compression.Half.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for value type.
            </summary>
            <returns>The type code.</returns>
        </member>
    </members>
</doc>
