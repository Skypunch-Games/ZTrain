#pragma kernel GPUFrustumCulling
#pragma kernel DistanceCulling

//#pragma enable_d3d11_debug_symbols

struct IndirectShaderData
{
	float4x4 PositionMatrix;
	float4x4 InversePositionMatrix;
	float4 ControlData;
};

uint _InstanceCount;
bool UseLODs;

//Used for run-time masks
float4 _TerrainPosition;
float4 _TerrainSize;
int _RealTimeMaskWidth;
int _RealTimeMaskHeight;
int _RealTimeMaskBand;
bool _RealTimeMaskEnabled;
bool _RealTimeMaskInvert;
float _RealTimeMaskCutoff;
Texture2D<float4> _RealTimeMaskTexture;

//Used for frustum culling
float4 _VS_CameraFrustumPlane0;
float4 _VS_CameraFrustumPlane1;
float4 _VS_CameraFrustumPlane2;
float4 _VS_CameraFrustumPlane3;
float4 _VS_CameraFrustumPlane4;
float4 _VS_CameraFrustumPlane5;
float4 _WorldSpaceCameraPos;

//Used for vegetatuion distance culling
float	_CullFarStart;
float	_CullFarDistance;
float	_BoundingSphereRadius;

//Used for LODs
float   _LOD1Distance;
float   _LOD2Distance;

bool ShadowCulling;
float3 _LightDirection;
float3 _PlaneOrigin;
float3 _BoundsSize;

StructuredBuffer<IndirectShaderData> SourceShaderDataBuffer;
AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD0;
AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD1;
AppendStructuredBuffer<IndirectShaderData> VisibleBufferLOD2;

AppendStructuredBuffer<IndirectShaderData> VisibleShadowBufferLOD0;
AppendStructuredBuffer<IndirectShaderData> VisibleShadowBufferLOD1;
AppendStructuredBuffer<IndirectShaderData> VisibleShadowBufferLOD2;

SamplerState _LinearClamp;

struct Ray
{	
	float3 origin;
	float3 direction;	
};

Ray CreateRay(float3 origin, float3 direction)
{
	Ray newRay;
	newRay.origin = origin;
	newRay.direction = direction;
	return newRay;
}

struct Bounds
{
	float3 center;
	float3 extents;	

	float3 GetMin() 
	{
		return center - extents;
	}

	float3 GetMax()
	{
		return center + extents;
	}

	void SetMinMax(float3 min, float3 max)
	{
		extents = (max - min) * 0.5f;
		center = min + extents;
	}

	void Encapsulate(float3 targetPoint)
	{
		SetMinMax(min(GetMin(), targetPoint), max(GetMax(), targetPoint));
	}
};

bool IntersectPlane(Ray ray, float3 planeOrigin, out float3 hitPoint)
{
	float3 planeNormal = -float3(0, 1, 0);
	float denominator = dot(ray.direction, planeNormal);
	if (denominator > 0.00001f)
	{
		float t = dot(planeOrigin - ray.origin, planeNormal) / denominator;
		hitPoint = ray.origin + ray.direction * t;
		return true;
	}

	hitPoint = float3(0, 0, 0);
	return false;
}

Bounds GetShadowBounds(Bounds objectBounds, float3 lightDirection, float3 planeOrigin, out bool hitPlane) 
{
	float3 objectBoundsMin = objectBounds.GetMin();
	float3 objectBoundsMax = objectBounds.GetMax();

	Ray p0 = CreateRay(float3(objectBoundsMin.x, objectBoundsMax.y, objectBoundsMin.z), lightDirection);
	Ray p1 = CreateRay(float3(objectBoundsMin.x, objectBoundsMax.y, 0), lightDirection);
	Ray p2 = CreateRay(float3(objectBoundsMax.x, objectBoundsMax.y, objectBoundsMin.z), lightDirection);
	Ray p3 = CreateRay(objectBoundsMax, lightDirection);

	float3 hitPoint;
	hitPlane = false;

	if (IntersectPlane(p0, planeOrigin, hitPoint))
	{
		objectBounds.Encapsulate(hitPoint);
		hitPlane = true;
	}

	if (IntersectPlane(p1, planeOrigin, hitPoint))
	{
		objectBounds.Encapsulate(hitPoint);
		hitPlane = true;
	}

	if (IntersectPlane(p2, planeOrigin, hitPoint))
	{
		objectBounds.Encapsulate(hitPoint);
		hitPlane = true;
	}

	if (IntersectPlane(p3, planeOrigin, hitPoint))
	{
		objectBounds.Encapsulate(hitPoint);
		hitPlane = true;
	}

	return objectBounds;
}

bool TestPlaneIntersection(Bounds bounds, float4 plane) 
{
	float3 center = bounds.center;
	float3 extents = bounds.extents;

	float3 planeNormal = plane.xyz;
	float planeDistance = plane.w;

	float3 absNormal = float3(abs(planeNormal.x), abs(planeNormal.y), abs(planeNormal.z));
	float r = extents.x * absNormal.x + extents.y * absNormal.y + extents.z * absNormal.z;
	float s = planeNormal.x * center.x + planeNormal.y * center.y + planeNormal.z * center.z;
	if (s + r < -planeDistance)
	{
		return false;
	}
	return true;
}

bool BoundsIntersectsFrustum(Bounds bounds)
{
	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane0) == false) {
		return false;
	}

	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane1) == false) {
		return false;
	}

	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane2) == false) {
		return false;
	}

	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane3) == false) {
		return false;
	}

	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane4) == false) {
		return false;
	}

	if (TestPlaneIntersection(bounds, _VS_CameraFrustumPlane5) == false) {
		return false;
	}
	return true;
}

bool IsShadowVisible(Bounds objectBounds, float3 lightDirection, float3 planeOrigin)
{
	bool hitPlane;
	Bounds shadowBounds = GetShadowBounds(objectBounds, lightDirection, planeOrigin, hitPlane);
	return hitPlane && BoundsIntersectsFrustum(shadowBounds);
}

bool SampleRealTimeMask(float3 instancePosition)
{
	float cellSizeX = _TerrainSize.x /_RealTimeMaskWidth;
	float cellSizeZ = _TerrainSize.z /_RealTimeMaskHeight;
	float3 localPosition = instancePosition.xyz - _TerrainPosition.xyz;

	uint2 texturePosition;
	texturePosition.x = clamp(floor(localPosition.x / cellSizeX),0,_RealTimeMaskWidth -1);
	texturePosition.y = clamp(floor(localPosition.z / cellSizeZ),0,_RealTimeMaskHeight -1);

	//float4 maskColor = _RealTimeMaskTexture.SampleLevel(_LinearClamp,normalizedPos,0);	
	float4 maskColor = _RealTimeMaskTexture[texturePosition];
	float sampleValue = maskColor.r;

	if (_RealTimeMaskBand == 1){sampleValue = maskColor.r; }
	if (_RealTimeMaskBand == 2){sampleValue = maskColor.g; }
	if (_RealTimeMaskBand == 3){sampleValue = maskColor.b; }
	if (_RealTimeMaskBand == 4){sampleValue = maskColor.a; }

	if (_RealTimeMaskInvert)
	{
	 sampleValue = 1 - sampleValue;
	}

	if (sampleValue > _RealTimeMaskCutoff)
	{ 
		return true;
	}
	else
	{
		return false;
	}	
}

[numthreads(32,1,1)]
void GPUFrustumCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	if (instanceId < _InstanceCount)
	{		
		IndirectShaderData instanceData;
		instanceData.PositionMatrix = SourceShaderDataBuffer[id.x].PositionMatrix;
		instanceData.InversePositionMatrix = SourceShaderDataBuffer[id.x].InversePositionMatrix;
		instanceData.ControlData = float4(0,0,0,0);

		#define transformPosition mul(instanceData.PositionMatrix, float4(0,0,0,1)).xyz
		float3 position = transformPosition + float3(0.0f, _BoundingSphereRadius * 0.5f, 0.0f);

		if (_RealTimeMaskEnabled)
		{
			if (SampleRealTimeMask(transformPosition))
			{
				return;
			}
		}

		float4 CameraDistances0 = float4(
				dot(_VS_CameraFrustumPlane0.xyz, position) + _VS_CameraFrustumPlane0.w,
				dot(_VS_CameraFrustumPlane1.xyz, position) + _VS_CameraFrustumPlane1.w,
				dot(_VS_CameraFrustumPlane2.xyz, position) + _VS_CameraFrustumPlane2.w,
				dot(_VS_CameraFrustumPlane3.xyz, position) + _VS_CameraFrustumPlane3.w
			);

		float4 CameraDistances1 = float4(
			dot(_VS_CameraFrustumPlane4.xyz, position) + _VS_CameraFrustumPlane4.w,
			dot(_VS_CameraFrustumPlane5.xyz, position) + _VS_CameraFrustumPlane5.w,
			0.0f,
			0.0f
			);

			if (!(all(CameraDistances0 >= -_BoundingSphereRadius)
				&& all(CameraDistances1 >= -_BoundingSphereRadius)))
			{		    
			    float3 itempos = instanceData.PositionMatrix._m03_m13_m23;			    			
			    #define distanceToCamera length(transformPosition - _WorldSpaceCameraPos.xyz)
				if (distanceToCamera < _CullFarStart + _CullFarDistance)
				{
				    Bounds itemBounds;
				    itemBounds.center = itempos;
				    itemBounds.extents = _BoundsSize;
				
					if (IsShadowVisible(itemBounds, _LightDirection, _PlaneOrigin))
				    {
				        if (UseLODs)
					    {
						    if (distanceToCamera < _LOD1Distance)
						    {
						    	VisibleShadowBufferLOD0.Append(instanceData);
						    }
						    else if (distanceToCamera < _LOD2Distance)
						    {
						    	VisibleShadowBufferLOD1.Append(instanceData);
						    }
						    else
						    {
						    	VisibleShadowBufferLOD2.Append(instanceData);
						    }
					    }
					    else
					    {
					    	VisibleShadowBufferLOD0.Append(instanceData);
					    }		
				    }
				}
			}
			else		
			{
				#define distanceToCamera length(transformPosition - _WorldSpaceCameraPos.xyz)
				if (distanceToCamera < _CullFarStart + _CullFarDistance)
				{
					if (UseLODs)
					{
						if (distanceToCamera < _LOD1Distance)
						{
							VisibleBufferLOD0.Append(instanceData);
						}
						else if (distanceToCamera < _LOD2Distance)
						{
							VisibleBufferLOD1.Append(instanceData);
						}
						else
						{
							VisibleBufferLOD2.Append(instanceData);
						}
					}
					else
					{
						VisibleBufferLOD0.Append(instanceData);
					}					
				}
			}
	}
}

[numthreads(32,1,1)]
void DistanceCulling(uint3 id : SV_DispatchThreadID)
{
	uint instanceId = id.x;
	if (instanceId < _InstanceCount)
	{
		IndirectShaderData instanceData;
		instanceData.PositionMatrix = SourceShaderDataBuffer[id.x].PositionMatrix;
		instanceData.InversePositionMatrix = SourceShaderDataBuffer[id.x].InversePositionMatrix;
		instanceData.ControlData = float4(0,0,0,0);

		#define transformPosition mul(instanceData.PositionMatrix, float4(0,0,0,1)).xyz
		#define distanceToCamera length(transformPosition - _WorldSpaceCameraPos.xyz)

		if (_RealTimeMaskEnabled)
		{
			if (SampleRealTimeMask(transformPosition))
			{
				return;
			}
		}

		if (distanceToCamera < _CullFarStart + _CullFarDistance)
		{
			if (UseLODs)
			{
				if (distanceToCamera < _LOD1Distance)
				{
					VisibleBufferLOD0.Append(instanceData);
				}
				else if (distanceToCamera < _LOD2Distance)
				{
					VisibleBufferLOD1.Append(instanceData);
				}
				else
				{
					VisibleBufferLOD2.Append(instanceData);
				}
			}
			else
			{
				VisibleBufferLOD0.Append(instanceData);
			}					
		}
	}
}